package First;

import First.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Wed Nov 16 17:10:01 IST 2016 by Sai
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Colour
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Colour", Colour.class, DefaultColour.class);
    }

    /**
     * Creates an instance of type Colour.  Modifies the underlying ontology.
     */
    public Colour createColour(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COLOUR, DefaultColour.class);
    }

    /**
     * Gets an instance of type Colour with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Colour getColour(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COLOUR, DefaultColour.class);
    }

    /**
     * Gets all instances of Colour from the ontology.
     */
    public Collection<? extends Colour> getAllColourInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COLOUR, DefaultColour.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Content
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Content", Content.class, DefaultContent.class);
    }

    /**
     * Creates an instance of type Content.  Modifies the underlying ontology.
     */
    public Content createContent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTENT, DefaultContent.class);
    }

    /**
     * Gets an instance of type Content with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Content getContent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTENT, DefaultContent.class);
    }

    /**
     * Gets all instances of Content from the ontology.
     */
    public Collection<? extends Content> getAllContentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTENT, DefaultContent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Crunchy
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Crunchy", Crunchy.class, DefaultCrunchy.class);
    }

    /**
     * Creates an instance of type Crunchy.  Modifies the underlying ontology.
     */
    public Crunchy createCrunchy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CRUNCHY, DefaultCrunchy.class);
    }

    /**
     * Gets an instance of type Crunchy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Crunchy getCrunchy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CRUNCHY, DefaultCrunchy.class);
    }

    /**
     * Gets all instances of Crunchy from the ontology.
     */
    public Collection<? extends Crunchy> getAllCrunchyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CRUNCHY, DefaultCrunchy.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Edible
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Edible", Edible.class, DefaultEdible.class);
    }

    /**
     * Creates an instance of type Edible.  Modifies the underlying ontology.
     */
    public Edible createEdible(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EDIBLE, DefaultEdible.class);
    }

    /**
     * Gets an instance of type Edible with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Edible getEdible(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EDIBLE, DefaultEdible.class);
    }

    /**
     * Gets all instances of Edible from the ontology.
     */
    public Collection<? extends Edible> getAllEdibleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EDIBLE, DefaultEdible.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Fruits
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Fruits", Fruits.class, DefaultFruits.class);
    }

    /**
     * Creates an instance of type Fruits.  Modifies the underlying ontology.
     */
    public Fruits createFruits(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRUITS, DefaultFruits.class);
    }

    /**
     * Gets an instance of type Fruits with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fruits getFruits(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRUITS, DefaultFruits.class);
    }

    /**
     * Gets all instances of Fruits from the ontology.
     */
    public Collection<? extends Fruits> getAllFruitsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRUITS, DefaultFruits.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#InnerLayer
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#InnerLayer", InnerLayer.class, DefaultInnerLayer.class);
    }

    /**
     * Creates an instance of type InnerLayer.  Modifies the underlying ontology.
     */
    public InnerLayer createInnerLayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INNERLAYER, DefaultInnerLayer.class);
    }

    /**
     * Gets an instance of type InnerLayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InnerLayer getInnerLayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INNERLAYER, DefaultInnerLayer.class);
    }

    /**
     * Gets all instances of InnerLayer from the ontology.
     */
    public Collection<? extends InnerLayer> getAllInnerLayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INNERLAYER, DefaultInnerLayer.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#NotEdible
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#NotEdible", NotEdible.class, DefaultNotEdible.class);
    }

    /**
     * Creates an instance of type NotEdible.  Modifies the underlying ontology.
     */
    public NotEdible createNotEdible(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOTEDIBLE, DefaultNotEdible.class);
    }

    /**
     * Gets an instance of type NotEdible with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NotEdible getNotEdible(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOTEDIBLE, DefaultNotEdible.class);
    }

    /**
     * Gets all instances of NotEdible from the ontology.
     */
    public Collection<? extends NotEdible> getAllNotEdibleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOTEDIBLE, DefaultNotEdible.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#NotPresent
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#NotPresent", NotPresent.class, DefaultNotPresent.class);
    }

    /**
     * Creates an instance of type NotPresent.  Modifies the underlying ontology.
     */
    public NotPresent createNotPresent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOTPRESENT, DefaultNotPresent.class);
    }

    /**
     * Gets an instance of type NotPresent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NotPresent getNotPresent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOTPRESENT, DefaultNotPresent.class);
    }

    /**
     * Gets all instances of NotPresent from the ontology.
     */
    public Collection<? extends NotPresent> getAllNotPresentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOTPRESENT, DefaultNotPresent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#OuterLayer
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#OuterLayer", OuterLayer.class, DefaultOuterLayer.class);
    }

    /**
     * Creates an instance of type OuterLayer.  Modifies the underlying ontology.
     */
    public OuterLayer createOuterLayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OUTERLAYER, DefaultOuterLayer.class);
    }

    /**
     * Gets an instance of type OuterLayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OuterLayer getOuterLayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OUTERLAYER, DefaultOuterLayer.class);
    }

    /**
     * Gets all instances of OuterLayer from the ontology.
     */
    public Collection<? extends OuterLayer> getAllOuterLayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OUTERLAYER, DefaultOuterLayer.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Present
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Present", Present.class, DefaultPresent.class);
    }

    /**
     * Creates an instance of type Present.  Modifies the underlying ontology.
     */
    public Present createPresent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESENT, DefaultPresent.class);
    }

    /**
     * Gets an instance of type Present with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Present getPresent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESENT, DefaultPresent.class);
    }

    /**
     * Gets all instances of Present from the ontology.
     */
    public Collection<? extends Present> getAllPresentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESENT, DefaultPresent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Prickly
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Prickly", Prickly.class, DefaultPrickly.class);
    }

    /**
     * Creates an instance of type Prickly.  Modifies the underlying ontology.
     */
    public Prickly createPrickly(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRICKLY, DefaultPrickly.class);
    }

    /**
     * Gets an instance of type Prickly with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Prickly getPrickly(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRICKLY, DefaultPrickly.class);
    }

    /**
     * Gets all instances of Prickly from the ontology.
     */
    public Collection<? extends Prickly> getAllPricklyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRICKLY, DefaultPrickly.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Ribbed
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Ribbed", Ribbed.class, DefaultRibbed.class);
    }

    /**
     * Creates an instance of type Ribbed.  Modifies the underlying ontology.
     */
    public Ribbed createRibbed(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RIBBED, DefaultRibbed.class);
    }

    /**
     * Gets an instance of type Ribbed with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ribbed getRibbed(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RIBBED, DefaultRibbed.class);
    }

    /**
     * Gets all instances of Ribbed from the ontology.
     */
    public Collection<? extends Ribbed> getAllRibbedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RIBBED, DefaultRibbed.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Seeds
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Seeds", Seeds.class, DefaultSeeds.class);
    }

    /**
     * Creates an instance of type Seeds.  Modifies the underlying ontology.
     */
    public Seeds createSeeds(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEEDS, DefaultSeeds.class);
    }

    /**
     * Gets an instance of type Seeds with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Seeds getSeeds(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEEDS, DefaultSeeds.class);
    }

    /**
     * Gets all instances of Seeds from the ontology.
     */
    public Collection<? extends Seeds> getAllSeedsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEEDS, DefaultSeeds.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Smooth
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Smooth", Smooth.class, DefaultSmooth.class);
    }

    /**
     * Creates an instance of type Smooth.  Modifies the underlying ontology.
     */
    public Smooth createSmooth(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SMOOTH, DefaultSmooth.class);
    }

    /**
     * Gets an instance of type Smooth with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Smooth getSmooth(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SMOOTH, DefaultSmooth.class);
    }

    /**
     * Gets all instances of Smooth from the ontology.
     */
    public Collection<? extends Smooth> getAllSmoothInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SMOOTH, DefaultSmooth.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Soft
     */

    {
        javaMapping.add("http://www.semanticweb.org/mahe/ontologies/2016/9/untitled-ontology-8#Soft", Soft.class, DefaultSoft.class);
    }

    /**
     * Creates an instance of type Soft.  Modifies the underlying ontology.
     */
    public Soft createSoft(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOFT, DefaultSoft.class);
    }

    /**
     * Gets an instance of type Soft with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Soft getSoft(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOFT, DefaultSoft.class);
    }

    /**
     * Gets all instances of Soft from the ontology.
     */
    public Collection<? extends Soft> getAllSoftInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOFT, DefaultSoft.class);
    }


}
